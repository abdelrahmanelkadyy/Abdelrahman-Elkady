

<div class="gift-guide-grid">
  <div class="products-grid" id="products-grid">
    {% for i in (1..6) %}
      {% assign product_handle = 'product_' | append: i %}
      {% assign product = all_products[section.settings[product_handle]] %}
      {% if product != blank %}
        <div class="product-card" 
             data-product-handle="{{ product.handle }}"
             data-product-title="{{ product.title }}"
             data-product-price="{{ product.price | money }}"
             data-product-description="{{ product.description | strip_html }}"
             data-product-image="{{ product.featured_image | img_url: '800x' }}">
          <img src="{{ product.featured_image | img_url: '800x' }}" 
               alt="{{ product.title | escape }}" 
               class="product-image"
               loading="lazy"
               width="800"
               height="800">
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<!-- Product Modal -->
<div class="modal" id="product-modal">
  <div class="modal-content">
    <button class="close-modal">&times;</button>
    <div class="product-details">
      <div class="product-gallery">
        <img id="modal-product-image" 
             src="" 
             alt="" 
             width="800" 
             height="800" 
             class="product-image"
             loading="lazy">
      </div>
      <div class="product-info">
        <h2 id="modal-product-title"></h2>
        <div class="product-price" id="modal-product-price"></div>
        <div class="product-description" id="modal-product-description"></div>
        <form id="add-to-cart-form">
          <div id="variant-selectors" class="variant-selector">
            <!-- Variant options will be inserted here by JavaScript -->
          </div>
          <button type="submit" class="add-to-cart" id="add-to-cart-button">
            ADD TO CART
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('product-modal');
  const modalTitle = document.getElementById('modal-product-title');
  const modalPrice = document.getElementById('modal-product-price');
  const modalDescription = document.getElementById('modal-product-description');
  const modalImage = document.getElementById('modal-product-image');
  const variantSelectors = document.getElementById('variant-selectors');
  const addToCartForm = document.getElementById('add-to-cart-form');
  const addToCartButton = document.getElementById('add-to-cart-button');
  const closeModal = document.querySelector('.close-modal');

  let currentProduct = null;
  let selectedVariantId = null;

  // Open modal when clicking on a product
  document.querySelectorAll('.product-card').forEach(card => {
    card.addEventListener('click', (e) => {
      // Don't open modal if clicking on a variant option
      if (e.target.closest('.variant-option-button')) return;
      const productHandle = card.dataset.productHandle;
      fetchProductDetails(productHandle);
    });
  });

  // Close modal
  closeModal.addEventListener('click', () => {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
  });

  // Close modal when clicking outside
  window.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.style.display = 'none';
      document.body.style.overflow = 'auto';
    }
  });

  // Handle add to cart
  addToCartForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!selectedVariantId) {
      alert('Please select all options');
      return;
    }

    addToCartButton.disabled = true;
    addToCartButton.textContent = 'Adding...';

    try {
      await addToCart(selectedVariantId, 1);
      addToCartButton.textContent = 'ADDED TO CART';
      setTimeout(() => {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
        addToCartButton.textContent = 'ADD TO CART';
        addToCartButton.disabled = false;
      }, 1000);
    } catch (error) {
      console.error('Error adding to cart:', error);
      alert('Error adding to cart. Please try again.');
      addToCartButton.textContent = 'ADD TO CART';
      addToCartButton.disabled = false;
    }
  });

  // Fetch product details including variants
  async function fetchProductDetails(handle) {
    try {
      const response = await fetch(`/products/${handle}.js`);
      const product = await response.json();
      currentProduct = product;
      updateModal(product);
    } catch (error) {
      console.error('Error fetching product:', error);
    }
  }

  // Update modal with product details
  function updateModal(product) {
    modalTitle.textContent = product.title;
    modalPrice.textContent = formatMoney(product.price);
    modalDescription.innerHTML = product.description;
    modalImage.src = product.featured_image;
    modalImage.alt = product.title;

    // Clear previous variant selectors
    variantSelectors.innerHTML = '';

    // Create variant selectors if product has variants
    if (product.variants.length > 1) {
      // Group variants by their options
      product.options.forEach((option, index) => {
        const optionName = option.name;
        const optionValues = [...new Set(product.variants.map(v => v.options[index]))];

        const optionContainer = document.createElement('div');
        optionContainer.className = 'variant-option';
        optionContainer.innerHTML = `
          <label>${optionName}</label>
          <div class="variant-options" data-option-index="${index}">
            ${optionValues.map(value => `
              <button type="button" 
                      class="variant-option-button" 
                      data-value="${value}">
                ${value}
              </button>
            `).join('')}
          </div>
        `;
        variantSelectors.appendChild(optionContainer);
      });

      // Add click handlers for variant options
      document.querySelectorAll('.variant-option-button').forEach(button => {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          const buttons = e.target.parentElement.querySelectorAll('.variant-option-button');
          buttons.forEach(btn => btn.classList.remove('selected'));
          e.target.classList.add('selected');
          updateSelectedVariant();
        });
      });

      // Set first variant as default
      if (product.variants.length > 0) {
        selectedVariantId = product.variants[0].id;
      }
    } else if (product.variants.length === 1) {
      selectedVariantId = product.variants[0].id;
    }

    // Show the modal
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }

  // Update selected variant when options change
  function updateSelectedVariant() {
    if (!currentProduct) return;

    const selectedOptions = [];
    const optionElements = document.querySelectorAll('.variant-options');
    
    optionElements.forEach(optionGroup => {
      const selectedButton = optionGroup.querySelector('.variant-option-button.selected');
      if (selectedButton) {
        selectedOptions.push(selectedButton.dataset.value);
      } else {
        // If no option is selected, use the first one
        const firstButton = optionGroup.querySelector('.variant-option-button');
        if (firstButton) {
          firstButton.classList.add('selected');
          selectedOptions.push(firstButton.dataset.value);
        }
      }
    });

    // Find the variant that matches all selected options
    const variant = currentProduct.variants.find(v => {
      return v.options.every((option, index) => option === selectedOptions[index]);
    });

    if (variant) {
      selectedVariantId = variant.id;
      modalPrice.textContent = formatMoney(variant.price);
    }
  }

  // Format money
  function formatMoney(cents) {
    return `$${(cents / 100).toFixed(2)}`;
  }

  // Add to cart function
  async function addToCart(variantId, quantity) {
    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: [{
            id: variantId,
            quantity: quantity
          }]
        })
      });

      if (!response.ok) {
        throw new Error('Failed to add to cart');
      }

      // Update cart count
      const cartResponse = await fetch('/cart.js');
      const cart = await cartResponse.json();
      updateCartCount(cart.item_count);
      
      return cart;
    } catch (error) {
      console.error('Error adding to cart:', error);
      throw error;
    }
  }

  // Update cart count in the header
  function updateCartCount(count) {
    const cartCountElements = document.querySelectorAll('.cart-count-bubble');
    cartCountElements.forEach(el => {
      el.textContent = count;
    });
  }
});
{% endjavascript %}

<style>
.gift-guide-grid {
  padding: 4rem 2rem;
  max-width: 1400px;
  margin: 0 auto;
}

.grid-title {
  text-align: center;
  font-size: 2.5rem;
  margin-bottom: 3rem;
  font-weight: 700;
}

.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 2rem;
  padding: 0 1rem;
}

.product-card {
  position: relative;
  overflow: hidden;
  cursor: pointer;
  aspect-ratio: 3/4;
}

.product-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.product-card:hover .product-image {
  transform: scale(1.05);
}

/* Modal Styles */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  z-index: 1000;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  box-sizing: border-box;
}

.modal-content {
  background: white;
  padding: 2rem;
  max-width: 800px;
  width: 100%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
}

.close-modal {
  position: absolute;
  top: 1rem;
  right: 1rem;
  font-size: 1.5rem;
  cursor: pointer;
  background: none;
  border: none;
  font-weight: bold;
}

.product-details {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
  align-items: start;
}

.product-gallery {
  position: relative;
}

.product-info h2 {
  font-size: 2rem;
  margin: 0 0 1rem;
}

.product-price {
  font-size: 1.5rem;
  font-weight: bold;
  margin: 1rem 0;
}

.product-description {
  margin: 1rem 0;
  line-height: 1.6;
}

.variant-selector {
  margin: 1.5rem 0;
}

.variant-option {
  margin-bottom: 1rem;
}

.variant-option label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.variant-options {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.variant-option-button {
  padding: 0.5rem 1rem;
  border: 1px solid #ddd;
  background: white;
  cursor: pointer;
  min-width: 50px;
  text-align: center;
}

.variant-option-button.selected {
  background: #000;
  color: white;
  border-color: #000;
}

.add-to-cart {
  background: #000;
  color: white;
  border: none;
  padding: 1rem 2rem;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  width: 100%;
  margin-top: 1rem;
  transition: opacity 0.3s;
}

.add-to-cart:hover {
  opacity: 0.9;
}

.add-to-cart:disabled {
  background: #ccc;
  cursor: not-allowed;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .products-grid {
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    padding: 0;
  }

  .product-details {
    grid-template-columns: 1fr;
  }

  .modal-content {
    padding: 1rem;
  }
}
</style>

{% schema %}
{
  "name": "Gift Guide Grid",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Our Gift Selection"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Product 1"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product 2"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product 3"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product 4"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product 5"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product 6"
    }
  ],
  "presets": [
    {
      "name": "Gift Guide Grid",
      "category": "Custom"
    }
  ]
}
{% endschema %}



